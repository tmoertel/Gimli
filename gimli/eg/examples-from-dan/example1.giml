###############################################################################
#
# Worked Gimli examples
# Tom Moertel <tom@moertel.com>
# 2005-09-30
#
# This is valid Gimli file that you can execute:
# ../../app/gimli < examples1.giml
#
###############################################################################

#==============================================================================
# typical task 1: extend pedigree structure w/ genotype info
#==============================================================================

file1  <- read.wsv("file1.wsv");

# File "file1.wsv" contents:
# ID geno marker
# 1  1/1  m1
# 1  2/2  m2
# 2  1/2  m1
# 2  2/1  m2

ped.in <- read.wsv("ped.wsv");

# File "ped.wsv" contents:
# ID ped per
# 1  1   1
# 2  1   2

# Helper that verifies that a table's IDs are unique.  If the table
# checks out, it is returned; otherwise, NULL is returned, assuring an
# error, should any table-operations be attempted on the bad table.

ucheck <- function(t, id="ID") do
  ids <- t$((id))$1;  # get id column (named by id variable) as a vector
  if length(uniq(ids)) == length(ids) then t
  else do
      print("non-unique ID in table:", t);
      NULL
  end
end;

# Create a helper function to full-join two tables and then merge
# their IDs, verifying ID uniqueness for each table first.

full.join.and.merge.ids <- function(l, r, id="ID") do
  id.1 <- id ++ ".1";
  (ucheck(l) === ucheck(r)) $ (+(id) = var(id) unless var(id.1); -(id.1))
end;

# This helper will extend a pedigree structure with the given
# genotype information, placing each marker into its own column.

extend.ped <- function(ped, geno, id="ID") do
  for m in uniq(geno$marker) do                     # for each unique marker m
    g <- geno[marker==m]$((id), "geno."++m = geno); # extract matches for m
    ped <- full.join.and.merge.ids(ped, g, id)      # & join into ped table
  end
end;

print( ped.in %extend.ped% file1 );

# Output:
#   ID ped per geno.m1 geno.m2
# 1  1   1   1   "1/1"   "2/2"
# 2  2   1   2   "1/2"   "2/1"


#==============================================================================
# typical task 2 (transposed version of task 1)
#==============================================================================

file3t <- read.wsv("file3.wsv", transpose=T);

# File "file3.wsv" contents:
# marker 1   2
# m1     1/1 1/2
# m2     2/2 2/1

# file3t as read and transposed by Gimli:
#   marker    m1    m2
# 1      1 "1/1" "2/2"
# 2      2 "1/2" "2/1"


# This helper does the same as the earlier extend.ped but works
# on transposed data.

extend.t.ped <- function(ped, genoT, id="ID", marker.id="marker") do
  ms <- names(genoT);  # get column names as vector
  for m in ms[ms != marker.id] do
      g <- genoT$((id) = var(marker.id), "geno." ++ m = var(m));
      ped <- full.join.and.merge.ids(ped, g, id)
  end
end;

print( extend.t.ped(ped.in, file3t) );

# Output:
#   ID ped per geno.m1 geno.m2
# 1  1   1   1   "1/1"   "2/2"
# 2  2   1   2   "1/2"   "2/1"


#==============================================================================
# typical task 3:  (task 1 split into many marker-specific files)
#==============================================================================

# This helper takes a pedigree structure and a list of files and then
# extends the pedigree by the marker information in the file.  It
# makes use of our earlier extend.ped function.

extend.ped.by.many.files <- function(ped, pathnames) do
  for f in pathnames do
    g <- read.wsv(f);
    ped <- ped %extend.ped% g
  end
end;

# The glob() function can be used to find files whose pathnames match
# the given shell "file globbing" pattern(s).  Here we use it to find
# the marker-specific genotype files (of which I have two).

marker.files <- glob("mfile*.wsv");
# Glob matches: ["./mfile1.wsv","./mfile2.wsv"]

# File "mfile1.wsv" contents:
# ID geno marker
# 1 1/1 m1
# 2 1/2 m1

# File "mfile2.wsv" contents:
# ID geno marker
# 1 2/2 m2
# 2 2/1 m2

print( extend.ped.by.many.files(ped.in, marker.files) );

# Output:
#   ID ped per geno.m1 geno.m2
# 1  1   1   1   "1/1"   "2/2"
# 2  2   1   2   "1/2"   "2/1"



#==============================================================================
# NA handling
#==============================================================================

# here we verify that NAs are handled as we would expect

file1NA <- read.wsv("file1NA.wsv");

# File "file1NA.wsv" contents:
# ID geno marker
# 1  1/1  m1
# 1  2/2  m2
# 3  1/2  m1    <--- note that this file has IDs 1 & 3 but no 2
# 3  2/1  m2         and that ped.in has IDs 1 & 2 but no 3.

print( extend.ped(ped.in, file1NA) );

# Output:
#   ID ped per geno.m1 geno.m2
# 1  1   1   1   "1/1"   "2/2"
# 2  2   1   2      NA      NA
# 3  3  NA  NA   "1/2"   "2/1"


#==============================================================================
# Non-unique ID handling
#==============================================================================

file1NAdup <- read.wsv("file1NAdup.wsv");

# File "file1NAdup.wsv" contents:
# ID geno marker
# 1  1/1  m1
# 1  2/2  m2
# 3  1/2  m2    <--- oops, there are two (ID=3,marker=m2) pairs
# 3  2/1  m2

# if our non-unique-ID check works, the following should fail
print( extend.ped(ped.in, file1NAdup) )

# Output:
# "non-unique ID in table:"
#   ID geno.m2
# 1  1   "2/2"
# 2  3   "1/2"
# 3  3   "2/1"
# error: during function application: 
# during function application:
# during for m in ...:
# during function application:
# argument 1 of $:
# argument 1 of $:
# argument 2 of join: not a table



# The ultimate semicolon tells Gimli not to print the final result, which
# would just duplicate the output of the previous print expression.

;
