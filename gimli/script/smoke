#!/usr/bin/perl

=head1 NAME

smoke - run checkout-build-and-smoke tests continuously

=head1 SYNOPSIS

B<smoke> I<darcs-repository> I<test-root-dir>

=head1 DESCRIPTION

This program can be used for continuous build- and smoke testing.  It
checks out the most-recent sources from the given Darcs repository,
chdirs into the given I<test-root-dir>, and then runs "make test".
After ten minutes, it repeats the process, continuing until
interrupted.

As an optimization, the program will checksum the sources and
re-run smoke tests only when the sources have changed.

=head1 AUTHOR

Tom Moertel (tom@moertel.com)

=cut

use warnings;
use strict;
use sigtrap qw(die normal-signals);

use Digest::SHA1;
use File::Find;
use File::Temp 'tempdir';


# check the command-line arguments

unless (@ARGV == 2) {
    print STDERR "Usage: smoke <darcs-repository> <test-root-dir>\n",
                 "Ex.:   smoke darcs.moertel.com:projects/gimli gimli\n";
    exit 1;
}
my ($repo, $test_root) = @ARGV;



# create temp directory to work in

my $tempdir = tempdir();
chdir $tempdir or die "cannot chdir to $tempdir: $!";
print STDERR "working out of $tempdir\n";


# enter checkout-build-and-smoke loop

my $checksum = "";

for (;;) {

    # pull most-recent sources to the dl/ directory via darcs

    sysrun([qw(rm -rf dl)]);
    mkdir "dl" or die "cannot make dl dir: $!";
    chdir "dl" or die "cannot chdir to dl dir: $!";
    sysrun([qw(darcs get), $repo]);
    chdir ".." or die "cannot chdir back to $tempdir: $!";
    
    # checksum the most-recent sources
    
    my $sha1 = Digest::SHA1->new;
    find( sub { -f && $sha1->add(slurp($_)) }, "dl" );
    my $new_checksum = $sha1->hexdigest;
    print STDERR "checksum = $new_checksum\n";
    
    # if the checksum has changed, run the smoke tests

    if ($new_checksum ne $checksum) {
        $checksum = $new_checksum;
        print STDERR "sources have changed; running smoke test\n";
        run_smoketest();
    }
    
    sleep 600;  # sleep for ten minutes
    
}

sub run_smoketest {
    sysrun([qw(rm -rf build)]);
    sysrun([qw(mkdir build)]);
    sysrun(["tar cf - -C dl . | tar xf - -C build"]);
    my $trial = eval { sysrun(["cd build/$test_root && make test"]) };
    my $msg   = $trial ? "SUCCESS" : "FAILURE";
    print STDERR "### $msg ###\n";
}

# cleanup code

END {
    if ($tempdir and -d $tempdir) {
        print STDERR "Cleaning up...\n";
        sysrun([qw(rm -rf), $tempdir]);
        print STDERR "Exiting.\n";
    }
}


# read a file in one big slurp

sub slurp {
    my $file = shift;
    open my $fh, $file or die "cannot open $file for reading: $!";
    my $contents = do { local $/; <$fh> };
    close $fh or die "close of $file failed: $!";
    return $contents;
}

# run the given command via system

sub sysrun {
    my $cmd = shift;
    print STDERR "+ @$cmd\n";
    system(@$cmd) == 0
        or die "system (@$cmd) failed: $?";
}
